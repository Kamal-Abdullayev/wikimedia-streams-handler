/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.projectx.producer.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WikimediaRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3553056947363578947L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WikimediaRecord\",\"namespace\":\"com.projectx.producer.dto\",\"fields\":[{\"name\":\"meta\",\"type\":{\"type\":\"record\",\"name\":\"Meta\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"request_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"domain\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"stream\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"partition\",\"type\":\"int\"},{\"name\":\"offset\",\"type\":\"long\"}]}},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"namespace\",\"type\":\"int\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"title_url\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"comment\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bot\",\"type\":\"boolean\"},{\"name\":\"notify_url\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"minor\",\"type\":\"boolean\"},{\"name\":\"patrolled\",\"type\":\"boolean\"},{\"name\":\"length\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Length\",\"fields\":[{\"name\":\"old\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"new\",\"type\":[\"null\",\"int\"],\"default\":null}]}]},{\"name\":\"revision\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Revision\",\"fields\":[{\"name\":\"old\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"new\",\"type\":[\"null\",\"long\"],\"default\":null}]}]},{\"name\":\"server_url\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"server_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"server_script_path\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"wiki\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"parsedcomment\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WikimediaRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WikimediaRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WikimediaRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WikimediaRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WikimediaRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WikimediaRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WikimediaRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WikimediaRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WikimediaRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.projectx.producer.dto.Meta meta;
  private long id;
  private java.lang.String type;
  private int namespace;
  private java.lang.String title;
  private java.lang.String title_url;
  private java.lang.String comment;
  private long timestamp;
  private java.lang.String user;
  private boolean bot;
  private java.lang.String notify_url;
  private boolean minor;
  private boolean patrolled;
  private com.projectx.producer.dto.Length length;
  private com.projectx.producer.dto.Revision revision;
  private java.lang.String server_url;
  private java.lang.String server_name;
  private java.lang.String server_script_path;
  private java.lang.String wiki;
  private java.lang.String parsedcomment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WikimediaRecord() {}

  /**
   * All-args constructor.
   * @param meta The new value for meta
   * @param id The new value for id
   * @param type The new value for type
   * @param namespace The new value for namespace
   * @param title The new value for title
   * @param title_url The new value for title_url
   * @param comment The new value for comment
   * @param timestamp The new value for timestamp
   * @param user The new value for user
   * @param bot The new value for bot
   * @param notify_url The new value for notify_url
   * @param minor The new value for minor
   * @param patrolled The new value for patrolled
   * @param length The new value for length
   * @param revision The new value for revision
   * @param server_url The new value for server_url
   * @param server_name The new value for server_name
   * @param server_script_path The new value for server_script_path
   * @param wiki The new value for wiki
   * @param parsedcomment The new value for parsedcomment
   */
  public WikimediaRecord(com.projectx.producer.dto.Meta meta, java.lang.Long id, java.lang.String type, java.lang.Integer namespace, java.lang.String title, java.lang.String title_url, java.lang.String comment, java.lang.Long timestamp, java.lang.String user, java.lang.Boolean bot, java.lang.String notify_url, java.lang.Boolean minor, java.lang.Boolean patrolled, com.projectx.producer.dto.Length length, com.projectx.producer.dto.Revision revision, java.lang.String server_url, java.lang.String server_name, java.lang.String server_script_path, java.lang.String wiki, java.lang.String parsedcomment) {
    this.meta = meta;
    this.id = id;
    this.type = type;
    this.namespace = namespace;
    this.title = title;
    this.title_url = title_url;
    this.comment = comment;
    this.timestamp = timestamp;
    this.user = user;
    this.bot = bot;
    this.notify_url = notify_url;
    this.minor = minor;
    this.patrolled = patrolled;
    this.length = length;
    this.revision = revision;
    this.server_url = server_url;
    this.server_name = server_name;
    this.server_script_path = server_script_path;
    this.wiki = wiki;
    this.parsedcomment = parsedcomment;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return meta;
    case 1: return id;
    case 2: return type;
    case 3: return namespace;
    case 4: return title;
    case 5: return title_url;
    case 6: return comment;
    case 7: return timestamp;
    case 8: return user;
    case 9: return bot;
    case 10: return notify_url;
    case 11: return minor;
    case 12: return patrolled;
    case 13: return length;
    case 14: return revision;
    case 15: return server_url;
    case 16: return server_name;
    case 17: return server_script_path;
    case 18: return wiki;
    case 19: return parsedcomment;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: meta = (com.projectx.producer.dto.Meta)value$; break;
    case 1: id = (java.lang.Long)value$; break;
    case 2: type = value$ != null ? value$.toString() : null; break;
    case 3: namespace = (java.lang.Integer)value$; break;
    case 4: title = value$ != null ? value$.toString() : null; break;
    case 5: title_url = value$ != null ? value$.toString() : null; break;
    case 6: comment = value$ != null ? value$.toString() : null; break;
    case 7: timestamp = (java.lang.Long)value$; break;
    case 8: user = value$ != null ? value$.toString() : null; break;
    case 9: bot = (java.lang.Boolean)value$; break;
    case 10: notify_url = value$ != null ? value$.toString() : null; break;
    case 11: minor = (java.lang.Boolean)value$; break;
    case 12: patrolled = (java.lang.Boolean)value$; break;
    case 13: length = (com.projectx.producer.dto.Length)value$; break;
    case 14: revision = (com.projectx.producer.dto.Revision)value$; break;
    case 15: server_url = value$ != null ? value$.toString() : null; break;
    case 16: server_name = value$ != null ? value$.toString() : null; break;
    case 17: server_script_path = value$ != null ? value$.toString() : null; break;
    case 18: wiki = value$ != null ? value$.toString() : null; break;
    case 19: parsedcomment = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'meta' field.
   * @return The value of the 'meta' field.
   */
  public com.projectx.producer.dto.Meta getMeta() {
    return meta;
  }


  /**
   * Sets the value of the 'meta' field.
   * @param value the value to set.
   */
  public void setMeta(com.projectx.producer.dto.Meta value) {
    this.meta = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'namespace' field.
   * @return The value of the 'namespace' field.
   */
  public int getNamespace() {
    return namespace;
  }


  /**
   * Sets the value of the 'namespace' field.
   * @param value the value to set.
   */
  public void setNamespace(int value) {
    this.namespace = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'title_url' field.
   * @return The value of the 'title_url' field.
   */
  public java.lang.String getTitleUrl() {
    return title_url;
  }


  /**
   * Sets the value of the 'title_url' field.
   * @param value the value to set.
   */
  public void setTitleUrl(java.lang.String value) {
    this.title_url = value;
  }

  /**
   * Gets the value of the 'comment' field.
   * @return The value of the 'comment' field.
   */
  public java.lang.String getComment() {
    return comment;
  }


  /**
   * Sets the value of the 'comment' field.
   * @param value the value to set.
   */
  public void setComment(java.lang.String value) {
    this.comment = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public java.lang.String getUser() {
    return user;
  }


  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.String value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'bot' field.
   * @return The value of the 'bot' field.
   */
  public boolean getBot() {
    return bot;
  }


  /**
   * Sets the value of the 'bot' field.
   * @param value the value to set.
   */
  public void setBot(boolean value) {
    this.bot = value;
  }

  /**
   * Gets the value of the 'notify_url' field.
   * @return The value of the 'notify_url' field.
   */
  public java.lang.String getNotifyUrl() {
    return notify_url;
  }


  /**
   * Sets the value of the 'notify_url' field.
   * @param value the value to set.
   */
  public void setNotifyUrl(java.lang.String value) {
    this.notify_url = value;
  }

  /**
   * Gets the value of the 'minor' field.
   * @return The value of the 'minor' field.
   */
  public boolean getMinor() {
    return minor;
  }


  /**
   * Sets the value of the 'minor' field.
   * @param value the value to set.
   */
  public void setMinor(boolean value) {
    this.minor = value;
  }

  /**
   * Gets the value of the 'patrolled' field.
   * @return The value of the 'patrolled' field.
   */
  public boolean getPatrolled() {
    return patrolled;
  }


  /**
   * Sets the value of the 'patrolled' field.
   * @param value the value to set.
   */
  public void setPatrolled(boolean value) {
    this.patrolled = value;
  }

  /**
   * Gets the value of the 'length' field.
   * @return The value of the 'length' field.
   */
  public com.projectx.producer.dto.Length getLength() {
    return length;
  }


  /**
   * Sets the value of the 'length' field.
   * @param value the value to set.
   */
  public void setLength(com.projectx.producer.dto.Length value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'revision' field.
   * @return The value of the 'revision' field.
   */
  public com.projectx.producer.dto.Revision getRevision() {
    return revision;
  }


  /**
   * Sets the value of the 'revision' field.
   * @param value the value to set.
   */
  public void setRevision(com.projectx.producer.dto.Revision value) {
    this.revision = value;
  }

  /**
   * Gets the value of the 'server_url' field.
   * @return The value of the 'server_url' field.
   */
  public java.lang.String getServerUrl() {
    return server_url;
  }


  /**
   * Sets the value of the 'server_url' field.
   * @param value the value to set.
   */
  public void setServerUrl(java.lang.String value) {
    this.server_url = value;
  }

  /**
   * Gets the value of the 'server_name' field.
   * @return The value of the 'server_name' field.
   */
  public java.lang.String getServerName() {
    return server_name;
  }


  /**
   * Sets the value of the 'server_name' field.
   * @param value the value to set.
   */
  public void setServerName(java.lang.String value) {
    this.server_name = value;
  }

  /**
   * Gets the value of the 'server_script_path' field.
   * @return The value of the 'server_script_path' field.
   */
  public java.lang.String getServerScriptPath() {
    return server_script_path;
  }


  /**
   * Sets the value of the 'server_script_path' field.
   * @param value the value to set.
   */
  public void setServerScriptPath(java.lang.String value) {
    this.server_script_path = value;
  }

  /**
   * Gets the value of the 'wiki' field.
   * @return The value of the 'wiki' field.
   */
  public java.lang.String getWiki() {
    return wiki;
  }


  /**
   * Sets the value of the 'wiki' field.
   * @param value the value to set.
   */
  public void setWiki(java.lang.String value) {
    this.wiki = value;
  }

  /**
   * Gets the value of the 'parsedcomment' field.
   * @return The value of the 'parsedcomment' field.
   */
  public java.lang.String getParsedcomment() {
    return parsedcomment;
  }


  /**
   * Sets the value of the 'parsedcomment' field.
   * @param value the value to set.
   */
  public void setParsedcomment(java.lang.String value) {
    this.parsedcomment = value;
  }

  /**
   * Creates a new WikimediaRecord RecordBuilder.
   * @return A new WikimediaRecord RecordBuilder
   */
  public static com.projectx.producer.dto.WikimediaRecord.Builder newBuilder() {
    return new com.projectx.producer.dto.WikimediaRecord.Builder();
  }

  /**
   * Creates a new WikimediaRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WikimediaRecord RecordBuilder
   */
  public static com.projectx.producer.dto.WikimediaRecord.Builder newBuilder(com.projectx.producer.dto.WikimediaRecord.Builder other) {
    if (other == null) {
      return new com.projectx.producer.dto.WikimediaRecord.Builder();
    } else {
      return new com.projectx.producer.dto.WikimediaRecord.Builder(other);
    }
  }

  /**
   * Creates a new WikimediaRecord RecordBuilder by copying an existing WikimediaRecord instance.
   * @param other The existing instance to copy.
   * @return A new WikimediaRecord RecordBuilder
   */
  public static com.projectx.producer.dto.WikimediaRecord.Builder newBuilder(com.projectx.producer.dto.WikimediaRecord other) {
    if (other == null) {
      return new com.projectx.producer.dto.WikimediaRecord.Builder();
    } else {
      return new com.projectx.producer.dto.WikimediaRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for WikimediaRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WikimediaRecord>
    implements org.apache.avro.data.RecordBuilder<WikimediaRecord> {

    private com.projectx.producer.dto.Meta meta;
    private com.projectx.producer.dto.Meta.Builder metaBuilder;
    private long id;
    private java.lang.String type;
    private int namespace;
    private java.lang.String title;
    private java.lang.String title_url;
    private java.lang.String comment;
    private long timestamp;
    private java.lang.String user;
    private boolean bot;
    private java.lang.String notify_url;
    private boolean minor;
    private boolean patrolled;
    private com.projectx.producer.dto.Length length;
    private com.projectx.producer.dto.Length.Builder lengthBuilder;
    private com.projectx.producer.dto.Revision revision;
    private com.projectx.producer.dto.Revision.Builder revisionBuilder;
    private java.lang.String server_url;
    private java.lang.String server_name;
    private java.lang.String server_script_path;
    private java.lang.String wiki;
    private java.lang.String parsedcomment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.projectx.producer.dto.WikimediaRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.meta)) {
        this.meta = data().deepCopy(fields()[0].schema(), other.meta);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasMetaBuilder()) {
        this.metaBuilder = com.projectx.producer.dto.Meta.newBuilder(other.getMetaBuilder());
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.namespace)) {
        this.namespace = data().deepCopy(fields()[3].schema(), other.namespace);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.title)) {
        this.title = data().deepCopy(fields()[4].schema(), other.title);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.title_url)) {
        this.title_url = data().deepCopy(fields()[5].schema(), other.title_url);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.comment)) {
        this.comment = data().deepCopy(fields()[6].schema(), other.comment);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.user)) {
        this.user = data().deepCopy(fields()[8].schema(), other.user);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.bot)) {
        this.bot = data().deepCopy(fields()[9].schema(), other.bot);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.notify_url)) {
        this.notify_url = data().deepCopy(fields()[10].schema(), other.notify_url);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.minor)) {
        this.minor = data().deepCopy(fields()[11].schema(), other.minor);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.patrolled)) {
        this.patrolled = data().deepCopy(fields()[12].schema(), other.patrolled);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.length)) {
        this.length = data().deepCopy(fields()[13].schema(), other.length);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (other.hasLengthBuilder()) {
        this.lengthBuilder = com.projectx.producer.dto.Length.newBuilder(other.getLengthBuilder());
      }
      if (isValidValue(fields()[14], other.revision)) {
        this.revision = data().deepCopy(fields()[14].schema(), other.revision);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (other.hasRevisionBuilder()) {
        this.revisionBuilder = com.projectx.producer.dto.Revision.newBuilder(other.getRevisionBuilder());
      }
      if (isValidValue(fields()[15], other.server_url)) {
        this.server_url = data().deepCopy(fields()[15].schema(), other.server_url);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.server_name)) {
        this.server_name = data().deepCopy(fields()[16].schema(), other.server_name);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.server_script_path)) {
        this.server_script_path = data().deepCopy(fields()[17].schema(), other.server_script_path);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.wiki)) {
        this.wiki = data().deepCopy(fields()[18].schema(), other.wiki);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.parsedcomment)) {
        this.parsedcomment = data().deepCopy(fields()[19].schema(), other.parsedcomment);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
    }

    /**
     * Creates a Builder by copying an existing WikimediaRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.projectx.producer.dto.WikimediaRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.meta)) {
        this.meta = data().deepCopy(fields()[0].schema(), other.meta);
        fieldSetFlags()[0] = true;
      }
      this.metaBuilder = null;
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.namespace)) {
        this.namespace = data().deepCopy(fields()[3].schema(), other.namespace);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.title)) {
        this.title = data().deepCopy(fields()[4].schema(), other.title);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.title_url)) {
        this.title_url = data().deepCopy(fields()[5].schema(), other.title_url);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.comment)) {
        this.comment = data().deepCopy(fields()[6].schema(), other.comment);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.user)) {
        this.user = data().deepCopy(fields()[8].schema(), other.user);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bot)) {
        this.bot = data().deepCopy(fields()[9].schema(), other.bot);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.notify_url)) {
        this.notify_url = data().deepCopy(fields()[10].schema(), other.notify_url);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.minor)) {
        this.minor = data().deepCopy(fields()[11].schema(), other.minor);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.patrolled)) {
        this.patrolled = data().deepCopy(fields()[12].schema(), other.patrolled);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.length)) {
        this.length = data().deepCopy(fields()[13].schema(), other.length);
        fieldSetFlags()[13] = true;
      }
      this.lengthBuilder = null;
      if (isValidValue(fields()[14], other.revision)) {
        this.revision = data().deepCopy(fields()[14].schema(), other.revision);
        fieldSetFlags()[14] = true;
      }
      this.revisionBuilder = null;
      if (isValidValue(fields()[15], other.server_url)) {
        this.server_url = data().deepCopy(fields()[15].schema(), other.server_url);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.server_name)) {
        this.server_name = data().deepCopy(fields()[16].schema(), other.server_name);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.server_script_path)) {
        this.server_script_path = data().deepCopy(fields()[17].schema(), other.server_script_path);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.wiki)) {
        this.wiki = data().deepCopy(fields()[18].schema(), other.wiki);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.parsedcomment)) {
        this.parsedcomment = data().deepCopy(fields()[19].schema(), other.parsedcomment);
        fieldSetFlags()[19] = true;
      }
    }

    /**
      * Gets the value of the 'meta' field.
      * @return The value.
      */
    public com.projectx.producer.dto.Meta getMeta() {
      return meta;
    }


    /**
      * Sets the value of the 'meta' field.
      * @param value The value of 'meta'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setMeta(com.projectx.producer.dto.Meta value) {
      validate(fields()[0], value);
      this.metaBuilder = null;
      this.meta = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'meta' field has been set.
      * @return True if the 'meta' field has been set, false otherwise.
      */
    public boolean hasMeta() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'meta' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.projectx.producer.dto.Meta.Builder getMetaBuilder() {
      if (metaBuilder == null) {
        if (hasMeta()) {
          setMetaBuilder(com.projectx.producer.dto.Meta.newBuilder(meta));
        } else {
          setMetaBuilder(com.projectx.producer.dto.Meta.newBuilder());
        }
      }
      return metaBuilder;
    }

    /**
     * Sets the Builder instance for the 'meta' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.projectx.producer.dto.WikimediaRecord.Builder setMetaBuilder(com.projectx.producer.dto.Meta.Builder value) {
      clearMeta();
      metaBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'meta' field has an active Builder instance
     * @return True if the 'meta' field has an active Builder instance
     */
    public boolean hasMetaBuilder() {
      return metaBuilder != null;
    }

    /**
      * Clears the value of the 'meta' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearMeta() {
      meta = null;
      metaBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setId(long value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setType(java.lang.String value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'namespace' field.
      * @return The value.
      */
    public int getNamespace() {
      return namespace;
    }


    /**
      * Sets the value of the 'namespace' field.
      * @param value The value of 'namespace'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setNamespace(int value) {
      validate(fields()[3], value);
      this.namespace = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'namespace' field has been set.
      * @return True if the 'namespace' field has been set, false otherwise.
      */
    public boolean hasNamespace() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'namespace' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearNamespace() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setTitle(java.lang.String value) {
      validate(fields()[4], value);
      this.title = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearTitle() {
      title = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'title_url' field.
      * @return The value.
      */
    public java.lang.String getTitleUrl() {
      return title_url;
    }


    /**
      * Sets the value of the 'title_url' field.
      * @param value The value of 'title_url'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setTitleUrl(java.lang.String value) {
      validate(fields()[5], value);
      this.title_url = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'title_url' field has been set.
      * @return True if the 'title_url' field has been set, false otherwise.
      */
    public boolean hasTitleUrl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'title_url' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearTitleUrl() {
      title_url = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'comment' field.
      * @return The value.
      */
    public java.lang.String getComment() {
      return comment;
    }


    /**
      * Sets the value of the 'comment' field.
      * @param value The value of 'comment'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setComment(java.lang.String value) {
      validate(fields()[6], value);
      this.comment = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'comment' field has been set.
      * @return True if the 'comment' field has been set, false otherwise.
      */
    public boolean hasComment() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'comment' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearComment() {
      comment = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setTimestamp(long value) {
      validate(fields()[7], value);
      this.timestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public java.lang.String getUser() {
      return user;
    }


    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setUser(java.lang.String value) {
      validate(fields()[8], value);
      this.user = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearUser() {
      user = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bot' field.
      * @return The value.
      */
    public boolean getBot() {
      return bot;
    }


    /**
      * Sets the value of the 'bot' field.
      * @param value The value of 'bot'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setBot(boolean value) {
      validate(fields()[9], value);
      this.bot = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bot' field has been set.
      * @return True if the 'bot' field has been set, false otherwise.
      */
    public boolean hasBot() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'bot' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearBot() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'notify_url' field.
      * @return The value.
      */
    public java.lang.String getNotifyUrl() {
      return notify_url;
    }


    /**
      * Sets the value of the 'notify_url' field.
      * @param value The value of 'notify_url'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setNotifyUrl(java.lang.String value) {
      validate(fields()[10], value);
      this.notify_url = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'notify_url' field has been set.
      * @return True if the 'notify_url' field has been set, false otherwise.
      */
    public boolean hasNotifyUrl() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'notify_url' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearNotifyUrl() {
      notify_url = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'minor' field.
      * @return The value.
      */
    public boolean getMinor() {
      return minor;
    }


    /**
      * Sets the value of the 'minor' field.
      * @param value The value of 'minor'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setMinor(boolean value) {
      validate(fields()[11], value);
      this.minor = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'minor' field has been set.
      * @return True if the 'minor' field has been set, false otherwise.
      */
    public boolean hasMinor() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'minor' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearMinor() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'patrolled' field.
      * @return The value.
      */
    public boolean getPatrolled() {
      return patrolled;
    }


    /**
      * Sets the value of the 'patrolled' field.
      * @param value The value of 'patrolled'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setPatrolled(boolean value) {
      validate(fields()[12], value);
      this.patrolled = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'patrolled' field has been set.
      * @return True if the 'patrolled' field has been set, false otherwise.
      */
    public boolean hasPatrolled() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'patrolled' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearPatrolled() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'length' field.
      * @return The value.
      */
    public com.projectx.producer.dto.Length getLength() {
      return length;
    }


    /**
      * Sets the value of the 'length' field.
      * @param value The value of 'length'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setLength(com.projectx.producer.dto.Length value) {
      validate(fields()[13], value);
      this.lengthBuilder = null;
      this.length = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'length' field has been set.
      * @return True if the 'length' field has been set, false otherwise.
      */
    public boolean hasLength() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'length' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.projectx.producer.dto.Length.Builder getLengthBuilder() {
      if (lengthBuilder == null) {
        if (hasLength()) {
          setLengthBuilder(com.projectx.producer.dto.Length.newBuilder(length));
        } else {
          setLengthBuilder(com.projectx.producer.dto.Length.newBuilder());
        }
      }
      return lengthBuilder;
    }

    /**
     * Sets the Builder instance for the 'length' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.projectx.producer.dto.WikimediaRecord.Builder setLengthBuilder(com.projectx.producer.dto.Length.Builder value) {
      clearLength();
      lengthBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'length' field has an active Builder instance
     * @return True if the 'length' field has an active Builder instance
     */
    public boolean hasLengthBuilder() {
      return lengthBuilder != null;
    }

    /**
      * Clears the value of the 'length' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearLength() {
      length = null;
      lengthBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'revision' field.
      * @return The value.
      */
    public com.projectx.producer.dto.Revision getRevision() {
      return revision;
    }


    /**
      * Sets the value of the 'revision' field.
      * @param value The value of 'revision'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setRevision(com.projectx.producer.dto.Revision value) {
      validate(fields()[14], value);
      this.revisionBuilder = null;
      this.revision = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'revision' field has been set.
      * @return True if the 'revision' field has been set, false otherwise.
      */
    public boolean hasRevision() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'revision' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.projectx.producer.dto.Revision.Builder getRevisionBuilder() {
      if (revisionBuilder == null) {
        if (hasRevision()) {
          setRevisionBuilder(com.projectx.producer.dto.Revision.newBuilder(revision));
        } else {
          setRevisionBuilder(com.projectx.producer.dto.Revision.newBuilder());
        }
      }
      return revisionBuilder;
    }

    /**
     * Sets the Builder instance for the 'revision' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.projectx.producer.dto.WikimediaRecord.Builder setRevisionBuilder(com.projectx.producer.dto.Revision.Builder value) {
      clearRevision();
      revisionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'revision' field has an active Builder instance
     * @return True if the 'revision' field has an active Builder instance
     */
    public boolean hasRevisionBuilder() {
      return revisionBuilder != null;
    }

    /**
      * Clears the value of the 'revision' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearRevision() {
      revision = null;
      revisionBuilder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'server_url' field.
      * @return The value.
      */
    public java.lang.String getServerUrl() {
      return server_url;
    }


    /**
      * Sets the value of the 'server_url' field.
      * @param value The value of 'server_url'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setServerUrl(java.lang.String value) {
      validate(fields()[15], value);
      this.server_url = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'server_url' field has been set.
      * @return True if the 'server_url' field has been set, false otherwise.
      */
    public boolean hasServerUrl() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'server_url' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearServerUrl() {
      server_url = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'server_name' field.
      * @return The value.
      */
    public java.lang.String getServerName() {
      return server_name;
    }


    /**
      * Sets the value of the 'server_name' field.
      * @param value The value of 'server_name'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setServerName(java.lang.String value) {
      validate(fields()[16], value);
      this.server_name = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'server_name' field has been set.
      * @return True if the 'server_name' field has been set, false otherwise.
      */
    public boolean hasServerName() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'server_name' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearServerName() {
      server_name = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'server_script_path' field.
      * @return The value.
      */
    public java.lang.String getServerScriptPath() {
      return server_script_path;
    }


    /**
      * Sets the value of the 'server_script_path' field.
      * @param value The value of 'server_script_path'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setServerScriptPath(java.lang.String value) {
      validate(fields()[17], value);
      this.server_script_path = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'server_script_path' field has been set.
      * @return True if the 'server_script_path' field has been set, false otherwise.
      */
    public boolean hasServerScriptPath() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'server_script_path' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearServerScriptPath() {
      server_script_path = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'wiki' field.
      * @return The value.
      */
    public java.lang.String getWiki() {
      return wiki;
    }


    /**
      * Sets the value of the 'wiki' field.
      * @param value The value of 'wiki'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setWiki(java.lang.String value) {
      validate(fields()[18], value);
      this.wiki = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'wiki' field has been set.
      * @return True if the 'wiki' field has been set, false otherwise.
      */
    public boolean hasWiki() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'wiki' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearWiki() {
      wiki = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'parsedcomment' field.
      * @return The value.
      */
    public java.lang.String getParsedcomment() {
      return parsedcomment;
    }


    /**
      * Sets the value of the 'parsedcomment' field.
      * @param value The value of 'parsedcomment'.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder setParsedcomment(java.lang.String value) {
      validate(fields()[19], value);
      this.parsedcomment = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'parsedcomment' field has been set.
      * @return True if the 'parsedcomment' field has been set, false otherwise.
      */
    public boolean hasParsedcomment() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'parsedcomment' field.
      * @return This builder.
      */
    public com.projectx.producer.dto.WikimediaRecord.Builder clearParsedcomment() {
      parsedcomment = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WikimediaRecord build() {
      try {
        WikimediaRecord record = new WikimediaRecord();
        if (metaBuilder != null) {
          try {
            record.meta = this.metaBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("meta"));
            throw e;
          }
        } else {
          record.meta = fieldSetFlags()[0] ? this.meta : (com.projectx.producer.dto.Meta) defaultValue(fields()[0]);
        }
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.Long) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.String) defaultValue(fields()[2]);
        record.namespace = fieldSetFlags()[3] ? this.namespace : (java.lang.Integer) defaultValue(fields()[3]);
        record.title = fieldSetFlags()[4] ? this.title : (java.lang.String) defaultValue(fields()[4]);
        record.title_url = fieldSetFlags()[5] ? this.title_url : (java.lang.String) defaultValue(fields()[5]);
        record.comment = fieldSetFlags()[6] ? this.comment : (java.lang.String) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.lang.Long) defaultValue(fields()[7]);
        record.user = fieldSetFlags()[8] ? this.user : (java.lang.String) defaultValue(fields()[8]);
        record.bot = fieldSetFlags()[9] ? this.bot : (java.lang.Boolean) defaultValue(fields()[9]);
        record.notify_url = fieldSetFlags()[10] ? this.notify_url : (java.lang.String) defaultValue(fields()[10]);
        record.minor = fieldSetFlags()[11] ? this.minor : (java.lang.Boolean) defaultValue(fields()[11]);
        record.patrolled = fieldSetFlags()[12] ? this.patrolled : (java.lang.Boolean) defaultValue(fields()[12]);
        if (lengthBuilder != null) {
          try {
            record.length = this.lengthBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("length"));
            throw e;
          }
        } else {
          record.length = fieldSetFlags()[13] ? this.length : (com.projectx.producer.dto.Length) defaultValue(fields()[13]);
        }
        if (revisionBuilder != null) {
          try {
            record.revision = this.revisionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("revision"));
            throw e;
          }
        } else {
          record.revision = fieldSetFlags()[14] ? this.revision : (com.projectx.producer.dto.Revision) defaultValue(fields()[14]);
        }
        record.server_url = fieldSetFlags()[15] ? this.server_url : (java.lang.String) defaultValue(fields()[15]);
        record.server_name = fieldSetFlags()[16] ? this.server_name : (java.lang.String) defaultValue(fields()[16]);
        record.server_script_path = fieldSetFlags()[17] ? this.server_script_path : (java.lang.String) defaultValue(fields()[17]);
        record.wiki = fieldSetFlags()[18] ? this.wiki : (java.lang.String) defaultValue(fields()[18]);
        record.parsedcomment = fieldSetFlags()[19] ? this.parsedcomment : (java.lang.String) defaultValue(fields()[19]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WikimediaRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<WikimediaRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WikimediaRecord>
    READER$ = (org.apache.avro.io.DatumReader<WikimediaRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.meta.customEncode(out);

    out.writeLong(this.id);

    out.writeString(this.type);

    out.writeInt(this.namespace);

    out.writeString(this.title);

    if (this.title_url == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.title_url);
    }

    out.writeString(this.comment);

    out.writeLong(this.timestamp);

    out.writeString(this.user);

    out.writeBoolean(this.bot);

    if (this.notify_url == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.notify_url);
    }

    out.writeBoolean(this.minor);

    out.writeBoolean(this.patrolled);

    if (this.length == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.length.customEncode(out);
    }

    if (this.revision == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.revision.customEncode(out);
    }

    if (this.server_url == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.server_url);
    }

    if (this.server_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.server_name);
    }

    if (this.server_script_path == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.server_script_path);
    }

    out.writeString(this.wiki);

    if (this.parsedcomment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.parsedcomment);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.meta == null) {
        this.meta = new com.projectx.producer.dto.Meta();
      }
      this.meta.customDecode(in);

      this.id = in.readLong();

      this.type = in.readString();

      this.namespace = in.readInt();

      this.title = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.title_url = null;
      } else {
        this.title_url = in.readString();
      }

      this.comment = in.readString();

      this.timestamp = in.readLong();

      this.user = in.readString();

      this.bot = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.notify_url = null;
      } else {
        this.notify_url = in.readString();
      }

      this.minor = in.readBoolean();

      this.patrolled = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.length = null;
      } else {
        if (this.length == null) {
          this.length = new com.projectx.producer.dto.Length();
        }
        this.length.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.revision = null;
      } else {
        if (this.revision == null) {
          this.revision = new com.projectx.producer.dto.Revision();
        }
        this.revision.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.server_url = null;
      } else {
        this.server_url = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.server_name = null;
      } else {
        this.server_name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.server_script_path = null;
      } else {
        this.server_script_path = in.readString();
      }

      this.wiki = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.parsedcomment = null;
      } else {
        this.parsedcomment = in.readString();
      }

    } else {
      for (int i = 0; i < 20; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.meta == null) {
            this.meta = new com.projectx.producer.dto.Meta();
          }
          this.meta.customDecode(in);
          break;

        case 1:
          this.id = in.readLong();
          break;

        case 2:
          this.type = in.readString();
          break;

        case 3:
          this.namespace = in.readInt();
          break;

        case 4:
          this.title = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.title_url = null;
          } else {
            this.title_url = in.readString();
          }
          break;

        case 6:
          this.comment = in.readString();
          break;

        case 7:
          this.timestamp = in.readLong();
          break;

        case 8:
          this.user = in.readString();
          break;

        case 9:
          this.bot = in.readBoolean();
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.notify_url = null;
          } else {
            this.notify_url = in.readString();
          }
          break;

        case 11:
          this.minor = in.readBoolean();
          break;

        case 12:
          this.patrolled = in.readBoolean();
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.length = null;
          } else {
            if (this.length == null) {
              this.length = new com.projectx.producer.dto.Length();
            }
            this.length.customDecode(in);
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.revision = null;
          } else {
            if (this.revision == null) {
              this.revision = new com.projectx.producer.dto.Revision();
            }
            this.revision.customDecode(in);
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.server_url = null;
          } else {
            this.server_url = in.readString();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.server_name = null;
          } else {
            this.server_name = in.readString();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.server_script_path = null;
          } else {
            this.server_script_path = in.readString();
          }
          break;

        case 18:
          this.wiki = in.readString();
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.parsedcomment = null;
          } else {
            this.parsedcomment = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










