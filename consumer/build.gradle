import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id "com.github.davidmc24.gradle.plugin.avro" version '1.5.0'
}

group = 'com.projectx'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	gradlePluginPortal()

	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven"
	}
	mavenLocal()
	flatDir {
		dirs "libs"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation("org.apache.avro:avro:1.12.0")
	implementation("org.springframework.boot:spring-boot-starter-webflux:3.4.1")

	implementation("io.confluent:kafka-avro-serializer:7.8.0")
	implementation("io.confluent:kafka-streams-avro-serde:7.8.0")
	implementation("io.confluent:kafka-schema-registry-client:7.8.0")

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
	source("src/main/resources/avro")
	outputDir = file("src/main/java")
}


tasks.named('test') {
	useJUnitPlatform()
}
